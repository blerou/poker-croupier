/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace API
{
  public partial class PlayerStrategy {
    public interface Iface {
      string name();
      #if SILVERLIGHT
      IAsyncResult Begin_name(AsyncCallback callback, object state);
      string End_name(IAsyncResult asyncResult);
      #endif
      long bet_request(long pot, API.BetLimits limits);
      #if SILVERLIGHT
      IAsyncResult Begin_bet_request(AsyncCallback callback, object state, long pot, API.BetLimits limits);
      long End_bet_request(IAsyncResult asyncResult);
      #endif
      void competitor_status(API.Competitor competitor);
      #if SILVERLIGHT
      IAsyncResult Begin_competitor_status(AsyncCallback callback, object state, API.Competitor competitor);
      void End_competitor_status(IAsyncResult asyncResult);
      #endif
      void bet(API.Competitor competitor, API.Bet bet);
      #if SILVERLIGHT
      IAsyncResult Begin_bet(AsyncCallback callback, object state, API.Competitor competitor, API.Bet bet);
      void End_bet(IAsyncResult asyncResult);
      #endif
      void hole_card(API.Card card);
      #if SILVERLIGHT
      IAsyncResult Begin_hole_card(AsyncCallback callback, object state, API.Card card);
      void End_hole_card(IAsyncResult asyncResult);
      #endif
      void community_card(API.Card card);
      #if SILVERLIGHT
      IAsyncResult Begin_community_card(AsyncCallback callback, object state, API.Card card);
      void End_community_card(IAsyncResult asyncResult);
      #endif
      void showdown(API.Competitor competitor, List<API.Card> cards, API.HandDescriptor hand);
      #if SILVERLIGHT
      IAsyncResult Begin_showdown(AsyncCallback callback, object state, API.Competitor competitor, List<API.Card> cards, API.HandDescriptor hand);
      void End_showdown(IAsyncResult asyncResult);
      #endif
      void winner(API.Competitor competitor, long amount);
      #if SILVERLIGHT
      IAsyncResult Begin_winner(AsyncCallback callback, object state, API.Competitor competitor, long amount);
      void End_winner(IAsyncResult asyncResult);
      #endif
      void shutdown();
      #if SILVERLIGHT
      IAsyncResult Begin_shutdown(AsyncCallback callback, object state);
      void End_shutdown(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_name(AsyncCallback callback, object state)
      {
        return send_name(callback, state);
      }

      public string End_name(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_name();
      }

      #endif

      public string name()
      {
        #if !SILVERLIGHT
        send_name();
        return recv_name();

        #else
        var asyncResult = Begin_name(null, null);
        return End_name(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_name(AsyncCallback callback, object state)
      #else
      public void send_name()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("name", TMessageType.Call, seqid_));
        name_args args = new name_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        name_result result = new name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "name failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_bet_request(AsyncCallback callback, object state, long pot, API.BetLimits limits)
      {
        return send_bet_request(callback, state, pot, limits);
      }

      public long End_bet_request(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_bet_request();
      }

      #endif

      public long bet_request(long pot, API.BetLimits limits)
      {
        #if !SILVERLIGHT
        send_bet_request(pot, limits);
        return recv_bet_request();

        #else
        var asyncResult = Begin_bet_request(null, null, pot, limits);
        return End_bet_request(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_bet_request(AsyncCallback callback, object state, long pot, API.BetLimits limits)
      #else
      public void send_bet_request(long pot, API.BetLimits limits)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("bet_request", TMessageType.Call, seqid_));
        bet_request_args args = new bet_request_args();
        args.Pot = pot;
        args.Limits = limits;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_bet_request()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        bet_request_result result = new bet_request_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bet_request failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_competitor_status(AsyncCallback callback, object state, API.Competitor competitor)
      {
        return send_competitor_status(callback, state, competitor);
      }

      public void End_competitor_status(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_competitor_status();
      }

      #endif

      public void competitor_status(API.Competitor competitor)
      {
        #if !SILVERLIGHT
        send_competitor_status(competitor);
        recv_competitor_status();

        #else
        var asyncResult = Begin_competitor_status(null, null, competitor);
        End_competitor_status(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_competitor_status(AsyncCallback callback, object state, API.Competitor competitor)
      #else
      public void send_competitor_status(API.Competitor competitor)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("competitor_status", TMessageType.Call, seqid_));
        competitor_status_args args = new competitor_status_args();
        args.Competitor = competitor;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_competitor_status()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        competitor_status_result result = new competitor_status_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_bet(AsyncCallback callback, object state, API.Competitor competitor, API.Bet bet)
      {
        return send_bet(callback, state, competitor, bet);
      }

      public void End_bet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_bet();
      }

      #endif

      public void bet(API.Competitor competitor, API.Bet bet)
      {
        #if !SILVERLIGHT
        send_bet(competitor, bet);
        recv_bet();

        #else
        var asyncResult = Begin_bet(null, null, competitor, bet);
        End_bet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_bet(AsyncCallback callback, object state, API.Competitor competitor, API.Bet bet)
      #else
      public void send_bet(API.Competitor competitor, API.Bet bet)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("bet", TMessageType.Call, seqid_));
        bet_args args = new bet_args();
        args.Competitor = competitor;
        args.Bet = bet;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_bet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        bet_result result = new bet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_hole_card(AsyncCallback callback, object state, API.Card card)
      {
        return send_hole_card(callback, state, card);
      }

      public void End_hole_card(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_hole_card();
      }

      #endif

      public void hole_card(API.Card card)
      {
        #if !SILVERLIGHT
        send_hole_card(card);
        recv_hole_card();

        #else
        var asyncResult = Begin_hole_card(null, null, card);
        End_hole_card(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_hole_card(AsyncCallback callback, object state, API.Card card)
      #else
      public void send_hole_card(API.Card card)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("hole_card", TMessageType.Call, seqid_));
        hole_card_args args = new hole_card_args();
        args.Card = card;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_hole_card()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hole_card_result result = new hole_card_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_community_card(AsyncCallback callback, object state, API.Card card)
      {
        return send_community_card(callback, state, card);
      }

      public void End_community_card(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_community_card();
      }

      #endif

      public void community_card(API.Card card)
      {
        #if !SILVERLIGHT
        send_community_card(card);
        recv_community_card();

        #else
        var asyncResult = Begin_community_card(null, null, card);
        End_community_card(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_community_card(AsyncCallback callback, object state, API.Card card)
      #else
      public void send_community_card(API.Card card)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("community_card", TMessageType.Call, seqid_));
        community_card_args args = new community_card_args();
        args.Card = card;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_community_card()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        community_card_result result = new community_card_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_showdown(AsyncCallback callback, object state, API.Competitor competitor, List<API.Card> cards, API.HandDescriptor hand)
      {
        return send_showdown(callback, state, competitor, cards, hand);
      }

      public void End_showdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_showdown();
      }

      #endif

      public void showdown(API.Competitor competitor, List<API.Card> cards, API.HandDescriptor hand)
      {
        #if !SILVERLIGHT
        send_showdown(competitor, cards, hand);
        recv_showdown();

        #else
        var asyncResult = Begin_showdown(null, null, competitor, cards, hand);
        End_showdown(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_showdown(AsyncCallback callback, object state, API.Competitor competitor, List<API.Card> cards, API.HandDescriptor hand)
      #else
      public void send_showdown(API.Competitor competitor, List<API.Card> cards, API.HandDescriptor hand)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("showdown", TMessageType.Call, seqid_));
        showdown_args args = new showdown_args();
        args.Competitor = competitor;
        args.Cards = cards;
        args.Hand = hand;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_showdown()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        showdown_result result = new showdown_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_winner(AsyncCallback callback, object state, API.Competitor competitor, long amount)
      {
        return send_winner(callback, state, competitor, amount);
      }

      public void End_winner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_winner();
      }

      #endif

      public void winner(API.Competitor competitor, long amount)
      {
        #if !SILVERLIGHT
        send_winner(competitor, amount);
        recv_winner();

        #else
        var asyncResult = Begin_winner(null, null, competitor, amount);
        End_winner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_winner(AsyncCallback callback, object state, API.Competitor competitor, long amount)
      #else
      public void send_winner(API.Competitor competitor, long amount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("winner", TMessageType.Call, seqid_));
        winner_args args = new winner_args();
        args.Competitor = competitor;
        args.Amount = amount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_winner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        winner_result result = new winner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shutdown(AsyncCallback callback, object state)
      {
        return send_shutdown(callback, state);
      }

      public void End_shutdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void shutdown()
      {
        #if !SILVERLIGHT
        send_shutdown();

        #else
        var asyncResult = Begin_shutdown(null, null);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shutdown(AsyncCallback callback, object state)
      #else
      public void send_shutdown()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shutdown", TMessageType.Call, seqid_));
        shutdown_args args = new shutdown_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["name"] = name_Process;
        processMap_["bet_request"] = bet_request_Process;
        processMap_["competitor_status"] = competitor_status_Process;
        processMap_["bet"] = bet_Process;
        processMap_["hole_card"] = hole_card_Process;
        processMap_["community_card"] = community_card_Process;
        processMap_["showdown"] = showdown_Process;
        processMap_["winner"] = winner_Process;
        processMap_["shutdown"] = shutdown_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        name_args args = new name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        name_result result = new name_result();
        result.Success = iface_.name();
        oprot.WriteMessageBegin(new TMessage("name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void bet_request_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        bet_request_args args = new bet_request_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        bet_request_result result = new bet_request_result();
        result.Success = iface_.bet_request(args.Pot, args.Limits);
        oprot.WriteMessageBegin(new TMessage("bet_request", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void competitor_status_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        competitor_status_args args = new competitor_status_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        competitor_status_result result = new competitor_status_result();
        iface_.competitor_status(args.Competitor);
        oprot.WriteMessageBegin(new TMessage("competitor_status", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void bet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        bet_args args = new bet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        bet_result result = new bet_result();
        iface_.bet(args.Competitor, args.Bet);
        oprot.WriteMessageBegin(new TMessage("bet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void hole_card_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hole_card_args args = new hole_card_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hole_card_result result = new hole_card_result();
        iface_.hole_card(args.Card);
        oprot.WriteMessageBegin(new TMessage("hole_card", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void community_card_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        community_card_args args = new community_card_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        community_card_result result = new community_card_result();
        iface_.community_card(args.Card);
        oprot.WriteMessageBegin(new TMessage("community_card", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void showdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        showdown_args args = new showdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        showdown_result result = new showdown_result();
        iface_.showdown(args.Competitor, args.Cards, args.Hand);
        oprot.WriteMessageBegin(new TMessage("showdown", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void winner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        winner_args args = new winner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        winner_result result = new winner_result();
        iface_.winner(args.Competitor, args.Amount);
        oprot.WriteMessageBegin(new TMessage("winner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shutdown_args args = new shutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.shutdown();
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class name_args : TBase
    {

      public name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("name_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("name_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class name_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("name_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bet_request_args : TBase
    {
      private long _pot;
      private API.BetLimits _limits;

      public long Pot
      {
        get
        {
          return _pot;
        }
        set
        {
          __isset.pot = true;
          this._pot = value;
        }
      }

      public API.BetLimits Limits
      {
        get
        {
          return _limits;
        }
        set
        {
          __isset.limits = true;
          this._limits = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pot;
        public bool limits;
      }

      public bet_request_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Pot = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Limits = new API.BetLimits();
                Limits.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("bet_request_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.pot) {
          field.Name = "pot";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Pot);
          oprot.WriteFieldEnd();
        }
        if (Limits != null && __isset.limits) {
          field.Name = "limits";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Limits.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("bet_request_args(");
        sb.Append("Pot: ");
        sb.Append(Pot);
        sb.Append(",Limits: ");
        sb.Append(Limits== null ? "<null>" : Limits.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bet_request_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public bet_request_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("bet_request_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("bet_request_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class competitor_status_args : TBase
    {
      private API.Competitor _competitor;

      public API.Competitor Competitor
      {
        get
        {
          return _competitor;
        }
        set
        {
          __isset.competitor = true;
          this._competitor = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool competitor;
      }

      public competitor_status_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Competitor = new API.Competitor();
                Competitor.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("competitor_status_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Competitor != null && __isset.competitor) {
          field.Name = "competitor";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Competitor.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("competitor_status_args(");
        sb.Append("Competitor: ");
        sb.Append(Competitor== null ? "<null>" : Competitor.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class competitor_status_result : TBase
    {

      public competitor_status_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("competitor_status_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("competitor_status_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bet_args : TBase
    {
      private API.Competitor _competitor;
      private API.Bet _bet;

      public API.Competitor Competitor
      {
        get
        {
          return _competitor;
        }
        set
        {
          __isset.competitor = true;
          this._competitor = value;
        }
      }

      public API.Bet Bet
      {
        get
        {
          return _bet;
        }
        set
        {
          __isset.bet = true;
          this._bet = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool competitor;
        public bool bet;
      }

      public bet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Competitor = new API.Competitor();
                Competitor.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Bet = new API.Bet();
                Bet.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("bet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Competitor != null && __isset.competitor) {
          field.Name = "competitor";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Competitor.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Bet != null && __isset.bet) {
          field.Name = "bet";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Bet.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("bet_args(");
        sb.Append("Competitor: ");
        sb.Append(Competitor== null ? "<null>" : Competitor.ToString());
        sb.Append(",Bet: ");
        sb.Append(Bet== null ? "<null>" : Bet.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bet_result : TBase
    {

      public bet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("bet_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("bet_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class hole_card_args : TBase
    {
      private API.Card _card;

      public API.Card Card
      {
        get
        {
          return _card;
        }
        set
        {
          __isset.card = true;
          this._card = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool card;
      }

      public hole_card_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Card = new API.Card();
                Card.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hole_card_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Card != null && __isset.card) {
          field.Name = "card";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Card.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hole_card_args(");
        sb.Append("Card: ");
        sb.Append(Card== null ? "<null>" : Card.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class hole_card_result : TBase
    {

      public hole_card_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hole_card_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hole_card_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class community_card_args : TBase
    {
      private API.Card _card;

      public API.Card Card
      {
        get
        {
          return _card;
        }
        set
        {
          __isset.card = true;
          this._card = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool card;
      }

      public community_card_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Card = new API.Card();
                Card.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("community_card_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Card != null && __isset.card) {
          field.Name = "card";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Card.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("community_card_args(");
        sb.Append("Card: ");
        sb.Append(Card== null ? "<null>" : Card.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class community_card_result : TBase
    {

      public community_card_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("community_card_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("community_card_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class showdown_args : TBase
    {
      private API.Competitor _competitor;
      private List<API.Card> _cards;
      private API.HandDescriptor _hand;

      public API.Competitor Competitor
      {
        get
        {
          return _competitor;
        }
        set
        {
          __isset.competitor = true;
          this._competitor = value;
        }
      }

      public List<API.Card> Cards
      {
        get
        {
          return _cards;
        }
        set
        {
          __isset.cards = true;
          this._cards = value;
        }
      }

      public API.HandDescriptor Hand
      {
        get
        {
          return _hand;
        }
        set
        {
          __isset.hand = true;
          this._hand = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool competitor;
        public bool cards;
        public bool hand;
      }

      public showdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Competitor = new API.Competitor();
                Competitor.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cards = new List<API.Card>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    API.Card _elem2 = new API.Card();
                    _elem2 = new API.Card();
                    _elem2.Read(iprot);
                    Cards.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Hand = new API.HandDescriptor();
                Hand.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("showdown_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Competitor != null && __isset.competitor) {
          field.Name = "competitor";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Competitor.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cards != null && __isset.cards) {
          field.Name = "cards";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cards.Count));
            foreach (API.Card _iter3 in Cards)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Hand != null && __isset.hand) {
          field.Name = "hand";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Hand.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("showdown_args(");
        sb.Append("Competitor: ");
        sb.Append(Competitor== null ? "<null>" : Competitor.ToString());
        sb.Append(",Cards: ");
        sb.Append(Cards);
        sb.Append(",Hand: ");
        sb.Append(Hand== null ? "<null>" : Hand.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class showdown_result : TBase
    {

      public showdown_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("showdown_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("showdown_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class winner_args : TBase
    {
      private API.Competitor _competitor;
      private long _amount;

      public API.Competitor Competitor
      {
        get
        {
          return _competitor;
        }
        set
        {
          __isset.competitor = true;
          this._competitor = value;
        }
      }

      public long Amount
      {
        get
        {
          return _amount;
        }
        set
        {
          __isset.amount = true;
          this._amount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool competitor;
        public bool amount;
      }

      public winner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Competitor = new API.Competitor();
                Competitor.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Amount = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("winner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Competitor != null && __isset.competitor) {
          field.Name = "competitor";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Competitor.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.amount) {
          field.Name = "amount";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Amount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("winner_args(");
        sb.Append("Competitor: ");
        sb.Append(Competitor== null ? "<null>" : Competitor.ToString());
        sb.Append(",Amount: ");
        sb.Append(Amount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class winner_result : TBase
    {

      public winner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("winner_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("winner_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shutdown_args : TBase
    {

      public shutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shutdown_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shutdown_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
