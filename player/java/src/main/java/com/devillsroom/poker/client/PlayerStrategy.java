/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.devillsroom.poker.client;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlayerStrategy {

  public interface Iface {

    public String name() throws org.apache.thrift.TException;

    public long bet_request(long pot, com.devillsroom.poker.client.BetLimits limits) throws org.apache.thrift.TException;

    public void competitor_status(com.devillsroom.poker.client.Competitor competitor) throws org.apache.thrift.TException;

    public void bet(com.devillsroom.poker.client.Competitor competitor, com.devillsroom.poker.client.Bet bet) throws org.apache.thrift.TException;

    public void hole_card(com.devillsroom.poker.client.Card card) throws org.apache.thrift.TException;

    public void community_card(com.devillsroom.poker.client.Card card) throws org.apache.thrift.TException;

    public void showdown(com.devillsroom.poker.client.Competitor competitor, List<com.devillsroom.poker.client.Card> cards, com.devillsroom.poker.client.HandDescriptor hand) throws org.apache.thrift.TException;

    public void winner(com.devillsroom.poker.client.Competitor competitor, long amount) throws org.apache.thrift.TException;

    public void shutdown() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void name(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bet_request(long pot, com.devillsroom.poker.client.BetLimits limits, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void competitor_status(com.devillsroom.poker.client.Competitor competitor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bet(com.devillsroom.poker.client.Competitor competitor, com.devillsroom.poker.client.Bet bet, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hole_card(com.devillsroom.poker.client.Card card, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void community_card(com.devillsroom.poker.client.Card card, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void showdown(com.devillsroom.poker.client.Competitor competitor, List<com.devillsroom.poker.client.Card> cards, com.devillsroom.poker.client.HandDescriptor hand, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void winner(com.devillsroom.poker.client.Competitor competitor, long amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String name() throws org.apache.thrift.TException
    {
      send_name();
      return recv_name();
    }

    public void send_name() throws org.apache.thrift.TException
    {
      name_args args = new name_args();
      sendBase("name", args);
    }

    public String recv_name() throws org.apache.thrift.TException
    {
      name_result result = new name_result();
      receiveBase(result, "name");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "name failed: unknown result");
    }

    public long bet_request(long pot, com.devillsroom.poker.client.BetLimits limits) throws org.apache.thrift.TException
    {
      send_bet_request(pot, limits);
      return recv_bet_request();
    }

    public void send_bet_request(long pot, com.devillsroom.poker.client.BetLimits limits) throws org.apache.thrift.TException
    {
      bet_request_args args = new bet_request_args();
      args.setPot(pot);
      args.setLimits(limits);
      sendBase("bet_request", args);
    }

    public long recv_bet_request() throws org.apache.thrift.TException
    {
      bet_request_result result = new bet_request_result();
      receiveBase(result, "bet_request");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bet_request failed: unknown result");
    }

    public void competitor_status(com.devillsroom.poker.client.Competitor competitor) throws org.apache.thrift.TException
    {
      send_competitor_status(competitor);
      recv_competitor_status();
    }

    public void send_competitor_status(com.devillsroom.poker.client.Competitor competitor) throws org.apache.thrift.TException
    {
      competitor_status_args args = new competitor_status_args();
      args.setCompetitor(competitor);
      sendBase("competitor_status", args);
    }

    public void recv_competitor_status() throws org.apache.thrift.TException
    {
      competitor_status_result result = new competitor_status_result();
      receiveBase(result, "competitor_status");
      return;
    }

    public void bet(com.devillsroom.poker.client.Competitor competitor, com.devillsroom.poker.client.Bet bet) throws org.apache.thrift.TException
    {
      send_bet(competitor, bet);
      recv_bet();
    }

    public void send_bet(com.devillsroom.poker.client.Competitor competitor, com.devillsroom.poker.client.Bet bet) throws org.apache.thrift.TException
    {
      bet_args args = new bet_args();
      args.setCompetitor(competitor);
      args.setBet(bet);
      sendBase("bet", args);
    }

    public void recv_bet() throws org.apache.thrift.TException
    {
      bet_result result = new bet_result();
      receiveBase(result, "bet");
      return;
    }

    public void hole_card(com.devillsroom.poker.client.Card card) throws org.apache.thrift.TException
    {
      send_hole_card(card);
      recv_hole_card();
    }

    public void send_hole_card(com.devillsroom.poker.client.Card card) throws org.apache.thrift.TException
    {
      hole_card_args args = new hole_card_args();
      args.setCard(card);
      sendBase("hole_card", args);
    }

    public void recv_hole_card() throws org.apache.thrift.TException
    {
      hole_card_result result = new hole_card_result();
      receiveBase(result, "hole_card");
      return;
    }

    public void community_card(com.devillsroom.poker.client.Card card) throws org.apache.thrift.TException
    {
      send_community_card(card);
      recv_community_card();
    }

    public void send_community_card(com.devillsroom.poker.client.Card card) throws org.apache.thrift.TException
    {
      community_card_args args = new community_card_args();
      args.setCard(card);
      sendBase("community_card", args);
    }

    public void recv_community_card() throws org.apache.thrift.TException
    {
      community_card_result result = new community_card_result();
      receiveBase(result, "community_card");
      return;
    }

    public void showdown(com.devillsroom.poker.client.Competitor competitor, List<com.devillsroom.poker.client.Card> cards, com.devillsroom.poker.client.HandDescriptor hand) throws org.apache.thrift.TException
    {
      send_showdown(competitor, cards, hand);
      recv_showdown();
    }

    public void send_showdown(com.devillsroom.poker.client.Competitor competitor, List<com.devillsroom.poker.client.Card> cards, com.devillsroom.poker.client.HandDescriptor hand) throws org.apache.thrift.TException
    {
      showdown_args args = new showdown_args();
      args.setCompetitor(competitor);
      args.setCards(cards);
      args.setHand(hand);
      sendBase("showdown", args);
    }

    public void recv_showdown() throws org.apache.thrift.TException
    {
      showdown_result result = new showdown_result();
      receiveBase(result, "showdown");
      return;
    }

    public void winner(com.devillsroom.poker.client.Competitor competitor, long amount) throws org.apache.thrift.TException
    {
      send_winner(competitor, amount);
      recv_winner();
    }

    public void send_winner(com.devillsroom.poker.client.Competitor competitor, long amount) throws org.apache.thrift.TException
    {
      winner_args args = new winner_args();
      args.setCompetitor(competitor);
      args.setAmount(amount);
      sendBase("winner", args);
    }

    public void recv_winner() throws org.apache.thrift.TException
    {
      winner_result result = new winner_result();
      receiveBase(result, "winner");
      return;
    }

    public void shutdown() throws org.apache.thrift.TException
    {
      send_shutdown();
    }

    public void send_shutdown() throws org.apache.thrift.TException
    {
      shutdown_args args = new shutdown_args();
      sendBase("shutdown", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void name(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      name_call method_call = new name_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class name_call extends org.apache.thrift.async.TAsyncMethodCall {
      public name_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("name", org.apache.thrift.protocol.TMessageType.CALL, 0));
        name_args args = new name_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_name();
      }
    }

    public void bet_request(long pot, com.devillsroom.poker.client.BetLimits limits, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bet_request_call method_call = new bet_request_call(pot, limits, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bet_request_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long pot;
      private com.devillsroom.poker.client.BetLimits limits;
      public bet_request_call(long pot, com.devillsroom.poker.client.BetLimits limits, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pot = pot;
        this.limits = limits;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bet_request", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bet_request_args args = new bet_request_args();
        args.setPot(pot);
        args.setLimits(limits);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bet_request();
      }
    }

    public void competitor_status(com.devillsroom.poker.client.Competitor competitor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      competitor_status_call method_call = new competitor_status_call(competitor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class competitor_status_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.devillsroom.poker.client.Competitor competitor;
      public competitor_status_call(com.devillsroom.poker.client.Competitor competitor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.competitor = competitor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("competitor_status", org.apache.thrift.protocol.TMessageType.CALL, 0));
        competitor_status_args args = new competitor_status_args();
        args.setCompetitor(competitor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_competitor_status();
      }
    }

    public void bet(com.devillsroom.poker.client.Competitor competitor, com.devillsroom.poker.client.Bet bet, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bet_call method_call = new bet_call(competitor, bet, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.devillsroom.poker.client.Competitor competitor;
      private com.devillsroom.poker.client.Bet bet;
      public bet_call(com.devillsroom.poker.client.Competitor competitor, com.devillsroom.poker.client.Bet bet, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.competitor = competitor;
        this.bet = bet;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bet_args args = new bet_args();
        args.setCompetitor(competitor);
        args.setBet(bet);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bet();
      }
    }

    public void hole_card(com.devillsroom.poker.client.Card card, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hole_card_call method_call = new hole_card_call(card, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hole_card_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.devillsroom.poker.client.Card card;
      public hole_card_call(com.devillsroom.poker.client.Card card, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.card = card;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hole_card", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hole_card_args args = new hole_card_args();
        args.setCard(card);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_hole_card();
      }
    }

    public void community_card(com.devillsroom.poker.client.Card card, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      community_card_call method_call = new community_card_call(card, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class community_card_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.devillsroom.poker.client.Card card;
      public community_card_call(com.devillsroom.poker.client.Card card, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.card = card;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("community_card", org.apache.thrift.protocol.TMessageType.CALL, 0));
        community_card_args args = new community_card_args();
        args.setCard(card);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_community_card();
      }
    }

    public void showdown(com.devillsroom.poker.client.Competitor competitor, List<com.devillsroom.poker.client.Card> cards, com.devillsroom.poker.client.HandDescriptor hand, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      showdown_call method_call = new showdown_call(competitor, cards, hand, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class showdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.devillsroom.poker.client.Competitor competitor;
      private List<com.devillsroom.poker.client.Card> cards;
      private com.devillsroom.poker.client.HandDescriptor hand;
      public showdown_call(com.devillsroom.poker.client.Competitor competitor, List<com.devillsroom.poker.client.Card> cards, com.devillsroom.poker.client.HandDescriptor hand, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.competitor = competitor;
        this.cards = cards;
        this.hand = hand;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("showdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        showdown_args args = new showdown_args();
        args.setCompetitor(competitor);
        args.setCards(cards);
        args.setHand(hand);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_showdown();
      }
    }

    public void winner(com.devillsroom.poker.client.Competitor competitor, long amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      winner_call method_call = new winner_call(competitor, amount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class winner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.devillsroom.poker.client.Competitor competitor;
      private long amount;
      public winner_call(com.devillsroom.poker.client.Competitor competitor, long amount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.competitor = competitor;
        this.amount = amount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("winner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        winner_args args = new winner_args();
        args.setCompetitor(competitor);
        args.setAmount(amount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_winner();
      }
    }

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdown_call method_call = new shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      public shutdown_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdown_args args = new shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("name", new name());
      processMap.put("bet_request", new bet_request());
      processMap.put("competitor_status", new competitor_status());
      processMap.put("bet", new bet());
      processMap.put("hole_card", new hole_card());
      processMap.put("community_card", new community_card());
      processMap.put("showdown", new showdown());
      processMap.put("winner", new winner());
      processMap.put("shutdown", new shutdown());
      return processMap;
    }

    public static class name<I extends Iface> extends org.apache.thrift.ProcessFunction<I, name_args> {
      public name() {
        super("name");
      }

      public name_args getEmptyArgsInstance() {
        return new name_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public name_result getResult(I iface, name_args args) throws org.apache.thrift.TException {
        name_result result = new name_result();
        result.success = iface.name();
        return result;
      }
    }

    public static class bet_request<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bet_request_args> {
      public bet_request() {
        super("bet_request");
      }

      public bet_request_args getEmptyArgsInstance() {
        return new bet_request_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bet_request_result getResult(I iface, bet_request_args args) throws org.apache.thrift.TException {
        bet_request_result result = new bet_request_result();
        result.success = iface.bet_request(args.pot, args.limits);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class competitor_status<I extends Iface> extends org.apache.thrift.ProcessFunction<I, competitor_status_args> {
      public competitor_status() {
        super("competitor_status");
      }

      public competitor_status_args getEmptyArgsInstance() {
        return new competitor_status_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public competitor_status_result getResult(I iface, competitor_status_args args) throws org.apache.thrift.TException {
        competitor_status_result result = new competitor_status_result();
        iface.competitor_status(args.competitor);
        return result;
      }
    }

    public static class bet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bet_args> {
      public bet() {
        super("bet");
      }

      public bet_args getEmptyArgsInstance() {
        return new bet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bet_result getResult(I iface, bet_args args) throws org.apache.thrift.TException {
        bet_result result = new bet_result();
        iface.bet(args.competitor, args.bet);
        return result;
      }
    }

    public static class hole_card<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hole_card_args> {
      public hole_card() {
        super("hole_card");
      }

      public hole_card_args getEmptyArgsInstance() {
        return new hole_card_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hole_card_result getResult(I iface, hole_card_args args) throws org.apache.thrift.TException {
        hole_card_result result = new hole_card_result();
        iface.hole_card(args.card);
        return result;
      }
    }

    public static class community_card<I extends Iface> extends org.apache.thrift.ProcessFunction<I, community_card_args> {
      public community_card() {
        super("community_card");
      }

      public community_card_args getEmptyArgsInstance() {
        return new community_card_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public community_card_result getResult(I iface, community_card_args args) throws org.apache.thrift.TException {
        community_card_result result = new community_card_result();
        iface.community_card(args.card);
        return result;
      }
    }

    public static class showdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, showdown_args> {
      public showdown() {
        super("showdown");
      }

      public showdown_args getEmptyArgsInstance() {
        return new showdown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public showdown_result getResult(I iface, showdown_args args) throws org.apache.thrift.TException {
        showdown_result result = new showdown_result();
        iface.showdown(args.competitor, args.cards, args.hand);
        return result;
      }
    }

    public static class winner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, winner_args> {
      public winner() {
        super("winner");
      }

      public winner_args getEmptyArgsInstance() {
        return new winner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public winner_result getResult(I iface, winner_args args) throws org.apache.thrift.TException {
        winner_result result = new winner_result();
        iface.winner(args.competitor, args.amount);
        return result;
      }
    }

    public static class shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdown_args> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, shutdown_args args) throws org.apache.thrift.TException {
        iface.shutdown();
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("name", new name());
      processMap.put("bet_request", new bet_request());
      processMap.put("competitor_status", new competitor_status());
      processMap.put("bet", new bet());
      processMap.put("hole_card", new hole_card());
      processMap.put("community_card", new community_card());
      processMap.put("showdown", new showdown());
      processMap.put("winner", new winner());
      processMap.put("shutdown", new shutdown());
      return processMap;
    }

    public static class name<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, name_args, String> {
      public name() {
        super("name");
      }

      public name_args getEmptyArgsInstance() {
        return new name_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            name_result result = new name_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            name_result result = new name_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, name_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.name(resultHandler);
      }
    }

    public static class bet_request<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bet_request_args, Long> {
      public bet_request() {
        super("bet_request");
      }

      public bet_request_args getEmptyArgsInstance() {
        return new bet_request_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            bet_request_result result = new bet_request_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bet_request_result result = new bet_request_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bet_request_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.bet_request(args.pot, args.limits,resultHandler);
      }
    }

    public static class competitor_status<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, competitor_status_args, Void> {
      public competitor_status() {
        super("competitor_status");
      }

      public competitor_status_args getEmptyArgsInstance() {
        return new competitor_status_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            competitor_status_result result = new competitor_status_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            competitor_status_result result = new competitor_status_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, competitor_status_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.competitor_status(args.competitor,resultHandler);
      }
    }

    public static class bet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bet_args, Void> {
      public bet() {
        super("bet");
      }

      public bet_args getEmptyArgsInstance() {
        return new bet_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bet_result result = new bet_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bet_result result = new bet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bet_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bet(args.competitor, args.bet,resultHandler);
      }
    }

    public static class hole_card<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hole_card_args, Void> {
      public hole_card() {
        super("hole_card");
      }

      public hole_card_args getEmptyArgsInstance() {
        return new hole_card_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            hole_card_result result = new hole_card_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hole_card_result result = new hole_card_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hole_card_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.hole_card(args.card,resultHandler);
      }
    }

    public static class community_card<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, community_card_args, Void> {
      public community_card() {
        super("community_card");
      }

      public community_card_args getEmptyArgsInstance() {
        return new community_card_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            community_card_result result = new community_card_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            community_card_result result = new community_card_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, community_card_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.community_card(args.card,resultHandler);
      }
    }

    public static class showdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, showdown_args, Void> {
      public showdown() {
        super("showdown");
      }

      public showdown_args getEmptyArgsInstance() {
        return new showdown_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            showdown_result result = new showdown_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            showdown_result result = new showdown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, showdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.showdown(args.competitor, args.cards, args.hand,resultHandler);
      }
    }

    public static class winner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, winner_args, Void> {
      public winner() {
        super("winner");
      }

      public winner_args getEmptyArgsInstance() {
        return new winner_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            winner_result result = new winner_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            winner_result result = new winner_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, winner_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.winner(args.competitor, args.amount,resultHandler);
      }
    }

    public static class shutdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdown_args, Void> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, shutdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.shutdown(resultHandler);
      }
    }

  }

  public static class name_args implements org.apache.thrift.TBase<name_args, name_args._Fields>, java.io.Serializable, Cloneable, Comparable<name_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("name_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new name_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new name_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(name_args.class, metaDataMap);
    }

    public name_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public name_args(name_args other) {
    }

    public name_args deepCopy() {
      return new name_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof name_args)
        return this.equals((name_args)that);
      return false;
    }

    public boolean equals(name_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(name_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("name_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class name_argsStandardSchemeFactory implements SchemeFactory {
      public name_argsStandardScheme getScheme() {
        return new name_argsStandardScheme();
      }
    }

    private static class name_argsStandardScheme extends StandardScheme<name_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, name_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, name_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class name_argsTupleSchemeFactory implements SchemeFactory {
      public name_argsTupleScheme getScheme() {
        return new name_argsTupleScheme();
      }
    }

    private static class name_argsTupleScheme extends TupleScheme<name_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, name_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, name_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class name_result implements org.apache.thrift.TBase<name_result, name_result._Fields>, java.io.Serializable, Cloneable, Comparable<name_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("name_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new name_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new name_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(name_result.class, metaDataMap);
    }

    public name_result() {
    }

    public name_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public name_result(name_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public name_result deepCopy() {
      return new name_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public name_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof name_result)
        return this.equals((name_result)that);
      return false;
    }

    public boolean equals(name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(name_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("name_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class name_resultStandardSchemeFactory implements SchemeFactory {
      public name_resultStandardScheme getScheme() {
        return new name_resultStandardScheme();
      }
    }

    private static class name_resultStandardScheme extends StandardScheme<name_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, name_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, name_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class name_resultTupleSchemeFactory implements SchemeFactory {
      public name_resultTupleScheme getScheme() {
        return new name_resultTupleScheme();
      }
    }

    private static class name_resultTupleScheme extends TupleScheme<name_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, name_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, name_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bet_request_args implements org.apache.thrift.TBase<bet_request_args, bet_request_args._Fields>, java.io.Serializable, Cloneable, Comparable<bet_request_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bet_request_args");

    private static final org.apache.thrift.protocol.TField POT_FIELD_DESC = new org.apache.thrift.protocol.TField("pot", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LIMITS_FIELD_DESC = new org.apache.thrift.protocol.TField("limits", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bet_request_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bet_request_argsTupleSchemeFactory());
    }

    public long pot; // required
    public com.devillsroom.poker.client.BetLimits limits; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POT((short)1, "pot"),
      LIMITS((short)2, "limits");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POT
            return POT;
          case 2: // LIMITS
            return LIMITS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POT, new org.apache.thrift.meta_data.FieldMetaData("pot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIMITS, new org.apache.thrift.meta_data.FieldMetaData("limits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.BetLimits.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bet_request_args.class, metaDataMap);
    }

    public bet_request_args() {
    }

    public bet_request_args(
      long pot,
      com.devillsroom.poker.client.BetLimits limits)
    {
      this();
      this.pot = pot;
      setPotIsSet(true);
      this.limits = limits;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bet_request_args(bet_request_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pot = other.pot;
      if (other.isSetLimits()) {
        this.limits = new com.devillsroom.poker.client.BetLimits(other.limits);
      }
    }

    public bet_request_args deepCopy() {
      return new bet_request_args(this);
    }

    @Override
    public void clear() {
      setPotIsSet(false);
      this.pot = 0;
      this.limits = null;
    }

    public long getPot() {
      return this.pot;
    }

    public bet_request_args setPot(long pot) {
      this.pot = pot;
      setPotIsSet(true);
      return this;
    }

    public void unsetPot() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POT_ISSET_ID);
    }

    /** Returns true if field pot is set (has been assigned a value) and false otherwise */
    public boolean isSetPot() {
      return EncodingUtils.testBit(__isset_bitfield, __POT_ISSET_ID);
    }

    public void setPotIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POT_ISSET_ID, value);
    }

    public com.devillsroom.poker.client.BetLimits getLimits() {
      return this.limits;
    }

    public bet_request_args setLimits(com.devillsroom.poker.client.BetLimits limits) {
      this.limits = limits;
      return this;
    }

    public void unsetLimits() {
      this.limits = null;
    }

    /** Returns true if field limits is set (has been assigned a value) and false otherwise */
    public boolean isSetLimits() {
      return this.limits != null;
    }

    public void setLimitsIsSet(boolean value) {
      if (!value) {
        this.limits = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case POT:
        if (value == null) {
          unsetPot();
        } else {
          setPot((Long)value);
        }
        break;

      case LIMITS:
        if (value == null) {
          unsetLimits();
        } else {
          setLimits((com.devillsroom.poker.client.BetLimits)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POT:
        return Long.valueOf(getPot());

      case LIMITS:
        return getLimits();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POT:
        return isSetPot();
      case LIMITS:
        return isSetLimits();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bet_request_args)
        return this.equals((bet_request_args)that);
      return false;
    }

    public boolean equals(bet_request_args that) {
      if (that == null)
        return false;

      boolean this_present_pot = true;
      boolean that_present_pot = true;
      if (this_present_pot || that_present_pot) {
        if (!(this_present_pot && that_present_pot))
          return false;
        if (this.pot != that.pot)
          return false;
      }

      boolean this_present_limits = true && this.isSetLimits();
      boolean that_present_limits = true && that.isSetLimits();
      if (this_present_limits || that_present_limits) {
        if (!(this_present_limits && that_present_limits))
          return false;
        if (!this.limits.equals(that.limits))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bet_request_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPot()).compareTo(other.isSetPot());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPot()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pot, other.pot);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimits()).compareTo(other.isSetLimits());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimits()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limits, other.limits);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bet_request_args(");
      boolean first = true;

      sb.append("pot:");
      sb.append(this.pot);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limits:");
      if (this.limits == null) {
        sb.append("null");
      } else {
        sb.append(this.limits);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (limits != null) {
        limits.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bet_request_argsStandardSchemeFactory implements SchemeFactory {
      public bet_request_argsStandardScheme getScheme() {
        return new bet_request_argsStandardScheme();
      }
    }

    private static class bet_request_argsStandardScheme extends StandardScheme<bet_request_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bet_request_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pot = iprot.readI64();
                struct.setPotIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMITS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.limits = new com.devillsroom.poker.client.BetLimits();
                struct.limits.read(iprot);
                struct.setLimitsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bet_request_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(POT_FIELD_DESC);
        oprot.writeI64(struct.pot);
        oprot.writeFieldEnd();
        if (struct.limits != null) {
          oprot.writeFieldBegin(LIMITS_FIELD_DESC);
          struct.limits.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bet_request_argsTupleSchemeFactory implements SchemeFactory {
      public bet_request_argsTupleScheme getScheme() {
        return new bet_request_argsTupleScheme();
      }
    }

    private static class bet_request_argsTupleScheme extends TupleScheme<bet_request_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bet_request_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPot()) {
          optionals.set(0);
        }
        if (struct.isSetLimits()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPot()) {
          oprot.writeI64(struct.pot);
        }
        if (struct.isSetLimits()) {
          struct.limits.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bet_request_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pot = iprot.readI64();
          struct.setPotIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limits = new com.devillsroom.poker.client.BetLimits();
          struct.limits.read(iprot);
          struct.setLimitsIsSet(true);
        }
      }
    }

  }

  public static class bet_request_result implements org.apache.thrift.TBase<bet_request_result, bet_request_result._Fields>, java.io.Serializable, Cloneable, Comparable<bet_request_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bet_request_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bet_request_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bet_request_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bet_request_result.class, metaDataMap);
    }

    public bet_request_result() {
    }

    public bet_request_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bet_request_result(bet_request_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public bet_request_result deepCopy() {
      return new bet_request_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public bet_request_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bet_request_result)
        return this.equals((bet_request_result)that);
      return false;
    }

    public boolean equals(bet_request_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bet_request_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bet_request_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bet_request_resultStandardSchemeFactory implements SchemeFactory {
      public bet_request_resultStandardScheme getScheme() {
        return new bet_request_resultStandardScheme();
      }
    }

    private static class bet_request_resultStandardScheme extends StandardScheme<bet_request_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bet_request_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bet_request_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bet_request_resultTupleSchemeFactory implements SchemeFactory {
      public bet_request_resultTupleScheme getScheme() {
        return new bet_request_resultTupleScheme();
      }
    }

    private static class bet_request_resultTupleScheme extends TupleScheme<bet_request_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bet_request_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bet_request_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class competitor_status_args implements org.apache.thrift.TBase<competitor_status_args, competitor_status_args._Fields>, java.io.Serializable, Cloneable, Comparable<competitor_status_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("competitor_status_args");

    private static final org.apache.thrift.protocol.TField COMPETITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("competitor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new competitor_status_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new competitor_status_argsTupleSchemeFactory());
    }

    public com.devillsroom.poker.client.Competitor competitor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPETITOR((short)1, "competitor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPETITOR
            return COMPETITOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPETITOR, new org.apache.thrift.meta_data.FieldMetaData("competitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Competitor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(competitor_status_args.class, metaDataMap);
    }

    public competitor_status_args() {
    }

    public competitor_status_args(
      com.devillsroom.poker.client.Competitor competitor)
    {
      this();
      this.competitor = competitor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public competitor_status_args(competitor_status_args other) {
      if (other.isSetCompetitor()) {
        this.competitor = new com.devillsroom.poker.client.Competitor(other.competitor);
      }
    }

    public competitor_status_args deepCopy() {
      return new competitor_status_args(this);
    }

    @Override
    public void clear() {
      this.competitor = null;
    }

    public com.devillsroom.poker.client.Competitor getCompetitor() {
      return this.competitor;
    }

    public competitor_status_args setCompetitor(com.devillsroom.poker.client.Competitor competitor) {
      this.competitor = competitor;
      return this;
    }

    public void unsetCompetitor() {
      this.competitor = null;
    }

    /** Returns true if field competitor is set (has been assigned a value) and false otherwise */
    public boolean isSetCompetitor() {
      return this.competitor != null;
    }

    public void setCompetitorIsSet(boolean value) {
      if (!value) {
        this.competitor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPETITOR:
        if (value == null) {
          unsetCompetitor();
        } else {
          setCompetitor((com.devillsroom.poker.client.Competitor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPETITOR:
        return getCompetitor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPETITOR:
        return isSetCompetitor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof competitor_status_args)
        return this.equals((competitor_status_args)that);
      return false;
    }

    public boolean equals(competitor_status_args that) {
      if (that == null)
        return false;

      boolean this_present_competitor = true && this.isSetCompetitor();
      boolean that_present_competitor = true && that.isSetCompetitor();
      if (this_present_competitor || that_present_competitor) {
        if (!(this_present_competitor && that_present_competitor))
          return false;
        if (!this.competitor.equals(that.competitor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(competitor_status_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompetitor()).compareTo(other.isSetCompetitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompetitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitor, other.competitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("competitor_status_args(");
      boolean first = true;

      sb.append("competitor:");
      if (this.competitor == null) {
        sb.append("null");
      } else {
        sb.append(this.competitor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (competitor != null) {
        competitor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class competitor_status_argsStandardSchemeFactory implements SchemeFactory {
      public competitor_status_argsStandardScheme getScheme() {
        return new competitor_status_argsStandardScheme();
      }
    }

    private static class competitor_status_argsStandardScheme extends StandardScheme<competitor_status_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, competitor_status_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPETITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.competitor = new com.devillsroom.poker.client.Competitor();
                struct.competitor.read(iprot);
                struct.setCompetitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, competitor_status_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.competitor != null) {
          oprot.writeFieldBegin(COMPETITOR_FIELD_DESC);
          struct.competitor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class competitor_status_argsTupleSchemeFactory implements SchemeFactory {
      public competitor_status_argsTupleScheme getScheme() {
        return new competitor_status_argsTupleScheme();
      }
    }

    private static class competitor_status_argsTupleScheme extends TupleScheme<competitor_status_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, competitor_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompetitor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCompetitor()) {
          struct.competitor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, competitor_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.competitor = new com.devillsroom.poker.client.Competitor();
          struct.competitor.read(iprot);
          struct.setCompetitorIsSet(true);
        }
      }
    }

  }

  public static class competitor_status_result implements org.apache.thrift.TBase<competitor_status_result, competitor_status_result._Fields>, java.io.Serializable, Cloneable, Comparable<competitor_status_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("competitor_status_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new competitor_status_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new competitor_status_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(competitor_status_result.class, metaDataMap);
    }

    public competitor_status_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public competitor_status_result(competitor_status_result other) {
    }

    public competitor_status_result deepCopy() {
      return new competitor_status_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof competitor_status_result)
        return this.equals((competitor_status_result)that);
      return false;
    }

    public boolean equals(competitor_status_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(competitor_status_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("competitor_status_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class competitor_status_resultStandardSchemeFactory implements SchemeFactory {
      public competitor_status_resultStandardScheme getScheme() {
        return new competitor_status_resultStandardScheme();
      }
    }

    private static class competitor_status_resultStandardScheme extends StandardScheme<competitor_status_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, competitor_status_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, competitor_status_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class competitor_status_resultTupleSchemeFactory implements SchemeFactory {
      public competitor_status_resultTupleScheme getScheme() {
        return new competitor_status_resultTupleScheme();
      }
    }

    private static class competitor_status_resultTupleScheme extends TupleScheme<competitor_status_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, competitor_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, competitor_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bet_args implements org.apache.thrift.TBase<bet_args, bet_args._Fields>, java.io.Serializable, Cloneable, Comparable<bet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bet_args");

    private static final org.apache.thrift.protocol.TField COMPETITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("competitor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BET_FIELD_DESC = new org.apache.thrift.protocol.TField("bet", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bet_argsTupleSchemeFactory());
    }

    public com.devillsroom.poker.client.Competitor competitor; // required
    public com.devillsroom.poker.client.Bet bet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPETITOR((short)1, "competitor"),
      BET((short)2, "bet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPETITOR
            return COMPETITOR;
          case 2: // BET
            return BET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPETITOR, new org.apache.thrift.meta_data.FieldMetaData("competitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Competitor.class)));
      tmpMap.put(_Fields.BET, new org.apache.thrift.meta_data.FieldMetaData("bet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Bet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bet_args.class, metaDataMap);
    }

    public bet_args() {
    }

    public bet_args(
      com.devillsroom.poker.client.Competitor competitor,
      com.devillsroom.poker.client.Bet bet)
    {
      this();
      this.competitor = competitor;
      this.bet = bet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bet_args(bet_args other) {
      if (other.isSetCompetitor()) {
        this.competitor = new com.devillsroom.poker.client.Competitor(other.competitor);
      }
      if (other.isSetBet()) {
        this.bet = new com.devillsroom.poker.client.Bet(other.bet);
      }
    }

    public bet_args deepCopy() {
      return new bet_args(this);
    }

    @Override
    public void clear() {
      this.competitor = null;
      this.bet = null;
    }

    public com.devillsroom.poker.client.Competitor getCompetitor() {
      return this.competitor;
    }

    public bet_args setCompetitor(com.devillsroom.poker.client.Competitor competitor) {
      this.competitor = competitor;
      return this;
    }

    public void unsetCompetitor() {
      this.competitor = null;
    }

    /** Returns true if field competitor is set (has been assigned a value) and false otherwise */
    public boolean isSetCompetitor() {
      return this.competitor != null;
    }

    public void setCompetitorIsSet(boolean value) {
      if (!value) {
        this.competitor = null;
      }
    }

    public com.devillsroom.poker.client.Bet getBet() {
      return this.bet;
    }

    public bet_args setBet(com.devillsroom.poker.client.Bet bet) {
      this.bet = bet;
      return this;
    }

    public void unsetBet() {
      this.bet = null;
    }

    /** Returns true if field bet is set (has been assigned a value) and false otherwise */
    public boolean isSetBet() {
      return this.bet != null;
    }

    public void setBetIsSet(boolean value) {
      if (!value) {
        this.bet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPETITOR:
        if (value == null) {
          unsetCompetitor();
        } else {
          setCompetitor((com.devillsroom.poker.client.Competitor)value);
        }
        break;

      case BET:
        if (value == null) {
          unsetBet();
        } else {
          setBet((com.devillsroom.poker.client.Bet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPETITOR:
        return getCompetitor();

      case BET:
        return getBet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPETITOR:
        return isSetCompetitor();
      case BET:
        return isSetBet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bet_args)
        return this.equals((bet_args)that);
      return false;
    }

    public boolean equals(bet_args that) {
      if (that == null)
        return false;

      boolean this_present_competitor = true && this.isSetCompetitor();
      boolean that_present_competitor = true && that.isSetCompetitor();
      if (this_present_competitor || that_present_competitor) {
        if (!(this_present_competitor && that_present_competitor))
          return false;
        if (!this.competitor.equals(that.competitor))
          return false;
      }

      boolean this_present_bet = true && this.isSetBet();
      boolean that_present_bet = true && that.isSetBet();
      if (this_present_bet || that_present_bet) {
        if (!(this_present_bet && that_present_bet))
          return false;
        if (!this.bet.equals(that.bet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompetitor()).compareTo(other.isSetCompetitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompetitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitor, other.competitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBet()).compareTo(other.isSetBet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bet, other.bet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bet_args(");
      boolean first = true;

      sb.append("competitor:");
      if (this.competitor == null) {
        sb.append("null");
      } else {
        sb.append(this.competitor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bet:");
      if (this.bet == null) {
        sb.append("null");
      } else {
        sb.append(this.bet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (competitor != null) {
        competitor.validate();
      }
      if (bet != null) {
        bet.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bet_argsStandardSchemeFactory implements SchemeFactory {
      public bet_argsStandardScheme getScheme() {
        return new bet_argsStandardScheme();
      }
    }

    private static class bet_argsStandardScheme extends StandardScheme<bet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPETITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.competitor = new com.devillsroom.poker.client.Competitor();
                struct.competitor.read(iprot);
                struct.setCompetitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bet = new com.devillsroom.poker.client.Bet();
                struct.bet.read(iprot);
                struct.setBetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.competitor != null) {
          oprot.writeFieldBegin(COMPETITOR_FIELD_DESC);
          struct.competitor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bet != null) {
          oprot.writeFieldBegin(BET_FIELD_DESC);
          struct.bet.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bet_argsTupleSchemeFactory implements SchemeFactory {
      public bet_argsTupleScheme getScheme() {
        return new bet_argsTupleScheme();
      }
    }

    private static class bet_argsTupleScheme extends TupleScheme<bet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompetitor()) {
          optionals.set(0);
        }
        if (struct.isSetBet()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompetitor()) {
          struct.competitor.write(oprot);
        }
        if (struct.isSetBet()) {
          struct.bet.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.competitor = new com.devillsroom.poker.client.Competitor();
          struct.competitor.read(iprot);
          struct.setCompetitorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bet = new com.devillsroom.poker.client.Bet();
          struct.bet.read(iprot);
          struct.setBetIsSet(true);
        }
      }
    }

  }

  public static class bet_result implements org.apache.thrift.TBase<bet_result, bet_result._Fields>, java.io.Serializable, Cloneable, Comparable<bet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bet_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bet_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bet_result.class, metaDataMap);
    }

    public bet_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bet_result(bet_result other) {
    }

    public bet_result deepCopy() {
      return new bet_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bet_result)
        return this.equals((bet_result)that);
      return false;
    }

    public boolean equals(bet_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bet_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bet_resultStandardSchemeFactory implements SchemeFactory {
      public bet_resultStandardScheme getScheme() {
        return new bet_resultStandardScheme();
      }
    }

    private static class bet_resultStandardScheme extends StandardScheme<bet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bet_resultTupleSchemeFactory implements SchemeFactory {
      public bet_resultTupleScheme getScheme() {
        return new bet_resultTupleScheme();
      }
    }

    private static class bet_resultTupleScheme extends TupleScheme<bet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class hole_card_args implements org.apache.thrift.TBase<hole_card_args, hole_card_args._Fields>, java.io.Serializable, Cloneable, Comparable<hole_card_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hole_card_args");

    private static final org.apache.thrift.protocol.TField CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("card", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hole_card_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hole_card_argsTupleSchemeFactory());
    }

    public com.devillsroom.poker.client.Card card; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARD((short)1, "card");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARD
            return CARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARD, new org.apache.thrift.meta_data.FieldMetaData("card", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Card.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hole_card_args.class, metaDataMap);
    }

    public hole_card_args() {
    }

    public hole_card_args(
      com.devillsroom.poker.client.Card card)
    {
      this();
      this.card = card;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hole_card_args(hole_card_args other) {
      if (other.isSetCard()) {
        this.card = new com.devillsroom.poker.client.Card(other.card);
      }
    }

    public hole_card_args deepCopy() {
      return new hole_card_args(this);
    }

    @Override
    public void clear() {
      this.card = null;
    }

    public com.devillsroom.poker.client.Card getCard() {
      return this.card;
    }

    public hole_card_args setCard(com.devillsroom.poker.client.Card card) {
      this.card = card;
      return this;
    }

    public void unsetCard() {
      this.card = null;
    }

    /** Returns true if field card is set (has been assigned a value) and false otherwise */
    public boolean isSetCard() {
      return this.card != null;
    }

    public void setCardIsSet(boolean value) {
      if (!value) {
        this.card = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARD:
        if (value == null) {
          unsetCard();
        } else {
          setCard((com.devillsroom.poker.client.Card)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARD:
        return getCard();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARD:
        return isSetCard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hole_card_args)
        return this.equals((hole_card_args)that);
      return false;
    }

    public boolean equals(hole_card_args that) {
      if (that == null)
        return false;

      boolean this_present_card = true && this.isSetCard();
      boolean that_present_card = true && that.isSetCard();
      if (this_present_card || that_present_card) {
        if (!(this_present_card && that_present_card))
          return false;
        if (!this.card.equals(that.card))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(hole_card_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCard()).compareTo(other.isSetCard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.card, other.card);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hole_card_args(");
      boolean first = true;

      sb.append("card:");
      if (this.card == null) {
        sb.append("null");
      } else {
        sb.append(this.card);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (card != null) {
        card.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hole_card_argsStandardSchemeFactory implements SchemeFactory {
      public hole_card_argsStandardScheme getScheme() {
        return new hole_card_argsStandardScheme();
      }
    }

    private static class hole_card_argsStandardScheme extends StandardScheme<hole_card_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hole_card_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.card = new com.devillsroom.poker.client.Card();
                struct.card.read(iprot);
                struct.setCardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hole_card_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.card != null) {
          oprot.writeFieldBegin(CARD_FIELD_DESC);
          struct.card.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hole_card_argsTupleSchemeFactory implements SchemeFactory {
      public hole_card_argsTupleScheme getScheme() {
        return new hole_card_argsTupleScheme();
      }
    }

    private static class hole_card_argsTupleScheme extends TupleScheme<hole_card_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hole_card_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCard()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCard()) {
          struct.card.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hole_card_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.card = new com.devillsroom.poker.client.Card();
          struct.card.read(iprot);
          struct.setCardIsSet(true);
        }
      }
    }

  }

  public static class hole_card_result implements org.apache.thrift.TBase<hole_card_result, hole_card_result._Fields>, java.io.Serializable, Cloneable, Comparable<hole_card_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hole_card_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hole_card_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hole_card_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hole_card_result.class, metaDataMap);
    }

    public hole_card_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hole_card_result(hole_card_result other) {
    }

    public hole_card_result deepCopy() {
      return new hole_card_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hole_card_result)
        return this.equals((hole_card_result)that);
      return false;
    }

    public boolean equals(hole_card_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(hole_card_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hole_card_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hole_card_resultStandardSchemeFactory implements SchemeFactory {
      public hole_card_resultStandardScheme getScheme() {
        return new hole_card_resultStandardScheme();
      }
    }

    private static class hole_card_resultStandardScheme extends StandardScheme<hole_card_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hole_card_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hole_card_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hole_card_resultTupleSchemeFactory implements SchemeFactory {
      public hole_card_resultTupleScheme getScheme() {
        return new hole_card_resultTupleScheme();
      }
    }

    private static class hole_card_resultTupleScheme extends TupleScheme<hole_card_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hole_card_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hole_card_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class community_card_args implements org.apache.thrift.TBase<community_card_args, community_card_args._Fields>, java.io.Serializable, Cloneable, Comparable<community_card_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("community_card_args");

    private static final org.apache.thrift.protocol.TField CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("card", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new community_card_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new community_card_argsTupleSchemeFactory());
    }

    public com.devillsroom.poker.client.Card card; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARD((short)1, "card");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARD
            return CARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARD, new org.apache.thrift.meta_data.FieldMetaData("card", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Card.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(community_card_args.class, metaDataMap);
    }

    public community_card_args() {
    }

    public community_card_args(
      com.devillsroom.poker.client.Card card)
    {
      this();
      this.card = card;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public community_card_args(community_card_args other) {
      if (other.isSetCard()) {
        this.card = new com.devillsroom.poker.client.Card(other.card);
      }
    }

    public community_card_args deepCopy() {
      return new community_card_args(this);
    }

    @Override
    public void clear() {
      this.card = null;
    }

    public com.devillsroom.poker.client.Card getCard() {
      return this.card;
    }

    public community_card_args setCard(com.devillsroom.poker.client.Card card) {
      this.card = card;
      return this;
    }

    public void unsetCard() {
      this.card = null;
    }

    /** Returns true if field card is set (has been assigned a value) and false otherwise */
    public boolean isSetCard() {
      return this.card != null;
    }

    public void setCardIsSet(boolean value) {
      if (!value) {
        this.card = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARD:
        if (value == null) {
          unsetCard();
        } else {
          setCard((com.devillsroom.poker.client.Card)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARD:
        return getCard();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARD:
        return isSetCard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof community_card_args)
        return this.equals((community_card_args)that);
      return false;
    }

    public boolean equals(community_card_args that) {
      if (that == null)
        return false;

      boolean this_present_card = true && this.isSetCard();
      boolean that_present_card = true && that.isSetCard();
      if (this_present_card || that_present_card) {
        if (!(this_present_card && that_present_card))
          return false;
        if (!this.card.equals(that.card))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(community_card_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCard()).compareTo(other.isSetCard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.card, other.card);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("community_card_args(");
      boolean first = true;

      sb.append("card:");
      if (this.card == null) {
        sb.append("null");
      } else {
        sb.append(this.card);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (card != null) {
        card.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class community_card_argsStandardSchemeFactory implements SchemeFactory {
      public community_card_argsStandardScheme getScheme() {
        return new community_card_argsStandardScheme();
      }
    }

    private static class community_card_argsStandardScheme extends StandardScheme<community_card_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, community_card_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.card = new com.devillsroom.poker.client.Card();
                struct.card.read(iprot);
                struct.setCardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, community_card_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.card != null) {
          oprot.writeFieldBegin(CARD_FIELD_DESC);
          struct.card.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class community_card_argsTupleSchemeFactory implements SchemeFactory {
      public community_card_argsTupleScheme getScheme() {
        return new community_card_argsTupleScheme();
      }
    }

    private static class community_card_argsTupleScheme extends TupleScheme<community_card_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, community_card_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCard()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCard()) {
          struct.card.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, community_card_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.card = new com.devillsroom.poker.client.Card();
          struct.card.read(iprot);
          struct.setCardIsSet(true);
        }
      }
    }

  }

  public static class community_card_result implements org.apache.thrift.TBase<community_card_result, community_card_result._Fields>, java.io.Serializable, Cloneable, Comparable<community_card_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("community_card_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new community_card_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new community_card_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(community_card_result.class, metaDataMap);
    }

    public community_card_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public community_card_result(community_card_result other) {
    }

    public community_card_result deepCopy() {
      return new community_card_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof community_card_result)
        return this.equals((community_card_result)that);
      return false;
    }

    public boolean equals(community_card_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(community_card_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("community_card_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class community_card_resultStandardSchemeFactory implements SchemeFactory {
      public community_card_resultStandardScheme getScheme() {
        return new community_card_resultStandardScheme();
      }
    }

    private static class community_card_resultStandardScheme extends StandardScheme<community_card_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, community_card_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, community_card_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class community_card_resultTupleSchemeFactory implements SchemeFactory {
      public community_card_resultTupleScheme getScheme() {
        return new community_card_resultTupleScheme();
      }
    }

    private static class community_card_resultTupleScheme extends TupleScheme<community_card_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, community_card_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, community_card_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class showdown_args implements org.apache.thrift.TBase<showdown_args, showdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<showdown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("showdown_args");

    private static final org.apache.thrift.protocol.TField COMPETITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("competitor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cards", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField HAND_FIELD_DESC = new org.apache.thrift.protocol.TField("hand", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new showdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new showdown_argsTupleSchemeFactory());
    }

    public com.devillsroom.poker.client.Competitor competitor; // required
    public List<com.devillsroom.poker.client.Card> cards; // required
    public com.devillsroom.poker.client.HandDescriptor hand; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPETITOR((short)1, "competitor"),
      CARDS((short)2, "cards"),
      HAND((short)3, "hand");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPETITOR
            return COMPETITOR;
          case 2: // CARDS
            return CARDS;
          case 3: // HAND
            return HAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPETITOR, new org.apache.thrift.meta_data.FieldMetaData("competitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Competitor.class)));
      tmpMap.put(_Fields.CARDS, new org.apache.thrift.meta_data.FieldMetaData("cards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Card.class))));
      tmpMap.put(_Fields.HAND, new org.apache.thrift.meta_data.FieldMetaData("hand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.HandDescriptor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(showdown_args.class, metaDataMap);
    }

    public showdown_args() {
    }

    public showdown_args(
      com.devillsroom.poker.client.Competitor competitor,
      List<com.devillsroom.poker.client.Card> cards,
      com.devillsroom.poker.client.HandDescriptor hand)
    {
      this();
      this.competitor = competitor;
      this.cards = cards;
      this.hand = hand;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public showdown_args(showdown_args other) {
      if (other.isSetCompetitor()) {
        this.competitor = new com.devillsroom.poker.client.Competitor(other.competitor);
      }
      if (other.isSetCards()) {
        List<com.devillsroom.poker.client.Card> __this__cards = new ArrayList<com.devillsroom.poker.client.Card>(other.cards.size());
        for (com.devillsroom.poker.client.Card other_element : other.cards) {
          __this__cards.add(new com.devillsroom.poker.client.Card(other_element));
        }
        this.cards = __this__cards;
      }
      if (other.isSetHand()) {
        this.hand = new com.devillsroom.poker.client.HandDescriptor(other.hand);
      }
    }

    public showdown_args deepCopy() {
      return new showdown_args(this);
    }

    @Override
    public void clear() {
      this.competitor = null;
      this.cards = null;
      this.hand = null;
    }

    public com.devillsroom.poker.client.Competitor getCompetitor() {
      return this.competitor;
    }

    public showdown_args setCompetitor(com.devillsroom.poker.client.Competitor competitor) {
      this.competitor = competitor;
      return this;
    }

    public void unsetCompetitor() {
      this.competitor = null;
    }

    /** Returns true if field competitor is set (has been assigned a value) and false otherwise */
    public boolean isSetCompetitor() {
      return this.competitor != null;
    }

    public void setCompetitorIsSet(boolean value) {
      if (!value) {
        this.competitor = null;
      }
    }

    public int getCardsSize() {
      return (this.cards == null) ? 0 : this.cards.size();
    }

    public java.util.Iterator<com.devillsroom.poker.client.Card> getCardsIterator() {
      return (this.cards == null) ? null : this.cards.iterator();
    }

    public void addToCards(com.devillsroom.poker.client.Card elem) {
      if (this.cards == null) {
        this.cards = new ArrayList<com.devillsroom.poker.client.Card>();
      }
      this.cards.add(elem);
    }

    public List<com.devillsroom.poker.client.Card> getCards() {
      return this.cards;
    }

    public showdown_args setCards(List<com.devillsroom.poker.client.Card> cards) {
      this.cards = cards;
      return this;
    }

    public void unsetCards() {
      this.cards = null;
    }

    /** Returns true if field cards is set (has been assigned a value) and false otherwise */
    public boolean isSetCards() {
      return this.cards != null;
    }

    public void setCardsIsSet(boolean value) {
      if (!value) {
        this.cards = null;
      }
    }

    public com.devillsroom.poker.client.HandDescriptor getHand() {
      return this.hand;
    }

    public showdown_args setHand(com.devillsroom.poker.client.HandDescriptor hand) {
      this.hand = hand;
      return this;
    }

    public void unsetHand() {
      this.hand = null;
    }

    /** Returns true if field hand is set (has been assigned a value) and false otherwise */
    public boolean isSetHand() {
      return this.hand != null;
    }

    public void setHandIsSet(boolean value) {
      if (!value) {
        this.hand = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPETITOR:
        if (value == null) {
          unsetCompetitor();
        } else {
          setCompetitor((com.devillsroom.poker.client.Competitor)value);
        }
        break;

      case CARDS:
        if (value == null) {
          unsetCards();
        } else {
          setCards((List<com.devillsroom.poker.client.Card>)value);
        }
        break;

      case HAND:
        if (value == null) {
          unsetHand();
        } else {
          setHand((com.devillsroom.poker.client.HandDescriptor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPETITOR:
        return getCompetitor();

      case CARDS:
        return getCards();

      case HAND:
        return getHand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPETITOR:
        return isSetCompetitor();
      case CARDS:
        return isSetCards();
      case HAND:
        return isSetHand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof showdown_args)
        return this.equals((showdown_args)that);
      return false;
    }

    public boolean equals(showdown_args that) {
      if (that == null)
        return false;

      boolean this_present_competitor = true && this.isSetCompetitor();
      boolean that_present_competitor = true && that.isSetCompetitor();
      if (this_present_competitor || that_present_competitor) {
        if (!(this_present_competitor && that_present_competitor))
          return false;
        if (!this.competitor.equals(that.competitor))
          return false;
      }

      boolean this_present_cards = true && this.isSetCards();
      boolean that_present_cards = true && that.isSetCards();
      if (this_present_cards || that_present_cards) {
        if (!(this_present_cards && that_present_cards))
          return false;
        if (!this.cards.equals(that.cards))
          return false;
      }

      boolean this_present_hand = true && this.isSetHand();
      boolean that_present_hand = true && that.isSetHand();
      if (this_present_hand || that_present_hand) {
        if (!(this_present_hand && that_present_hand))
          return false;
        if (!this.hand.equals(that.hand))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(showdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompetitor()).compareTo(other.isSetCompetitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompetitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitor, other.competitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCards()).compareTo(other.isSetCards());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCards()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cards, other.cards);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHand()).compareTo(other.isSetHand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hand, other.hand);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("showdown_args(");
      boolean first = true;

      sb.append("competitor:");
      if (this.competitor == null) {
        sb.append("null");
      } else {
        sb.append(this.competitor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cards:");
      if (this.cards == null) {
        sb.append("null");
      } else {
        sb.append(this.cards);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hand:");
      if (this.hand == null) {
        sb.append("null");
      } else {
        sb.append(this.hand);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (competitor != null) {
        competitor.validate();
      }
      if (hand != null) {
        hand.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showdown_argsStandardSchemeFactory implements SchemeFactory {
      public showdown_argsStandardScheme getScheme() {
        return new showdown_argsStandardScheme();
      }
    }

    private static class showdown_argsStandardScheme extends StandardScheme<showdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, showdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPETITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.competitor = new com.devillsroom.poker.client.Competitor();
                struct.competitor.read(iprot);
                struct.setCompetitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CARDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.cards = new ArrayList<com.devillsroom.poker.client.Card>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.devillsroom.poker.client.Card _elem2;
                    _elem2 = new com.devillsroom.poker.client.Card();
                    _elem2.read(iprot);
                    struct.cards.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setCardsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hand = new com.devillsroom.poker.client.HandDescriptor();
                struct.hand.read(iprot);
                struct.setHandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, showdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.competitor != null) {
          oprot.writeFieldBegin(COMPETITOR_FIELD_DESC);
          struct.competitor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cards != null) {
          oprot.writeFieldBegin(CARDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cards.size()));
            for (com.devillsroom.poker.client.Card _iter3 : struct.cards)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.hand != null) {
          oprot.writeFieldBegin(HAND_FIELD_DESC);
          struct.hand.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showdown_argsTupleSchemeFactory implements SchemeFactory {
      public showdown_argsTupleScheme getScheme() {
        return new showdown_argsTupleScheme();
      }
    }

    private static class showdown_argsTupleScheme extends TupleScheme<showdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, showdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompetitor()) {
          optionals.set(0);
        }
        if (struct.isSetCards()) {
          optionals.set(1);
        }
        if (struct.isSetHand()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCompetitor()) {
          struct.competitor.write(oprot);
        }
        if (struct.isSetCards()) {
          {
            oprot.writeI32(struct.cards.size());
            for (com.devillsroom.poker.client.Card _iter4 : struct.cards)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetHand()) {
          struct.hand.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, showdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.competitor = new com.devillsroom.poker.client.Competitor();
          struct.competitor.read(iprot);
          struct.setCompetitorIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.cards = new ArrayList<com.devillsroom.poker.client.Card>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.devillsroom.poker.client.Card _elem7;
              _elem7 = new com.devillsroom.poker.client.Card();
              _elem7.read(iprot);
              struct.cards.add(_elem7);
            }
          }
          struct.setCardsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hand = new com.devillsroom.poker.client.HandDescriptor();
          struct.hand.read(iprot);
          struct.setHandIsSet(true);
        }
      }
    }

  }

  public static class showdown_result implements org.apache.thrift.TBase<showdown_result, showdown_result._Fields>, java.io.Serializable, Cloneable, Comparable<showdown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("showdown_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new showdown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new showdown_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(showdown_result.class, metaDataMap);
    }

    public showdown_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public showdown_result(showdown_result other) {
    }

    public showdown_result deepCopy() {
      return new showdown_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof showdown_result)
        return this.equals((showdown_result)that);
      return false;
    }

    public boolean equals(showdown_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(showdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("showdown_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showdown_resultStandardSchemeFactory implements SchemeFactory {
      public showdown_resultStandardScheme getScheme() {
        return new showdown_resultStandardScheme();
      }
    }

    private static class showdown_resultStandardScheme extends StandardScheme<showdown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, showdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, showdown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showdown_resultTupleSchemeFactory implements SchemeFactory {
      public showdown_resultTupleScheme getScheme() {
        return new showdown_resultTupleScheme();
      }
    }

    private static class showdown_resultTupleScheme extends TupleScheme<showdown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, showdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, showdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class winner_args implements org.apache.thrift.TBase<winner_args, winner_args._Fields>, java.io.Serializable, Cloneable, Comparable<winner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("winner_args");

    private static final org.apache.thrift.protocol.TField COMPETITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("competitor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new winner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new winner_argsTupleSchemeFactory());
    }

    public com.devillsroom.poker.client.Competitor competitor; // required
    public long amount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPETITOR((short)1, "competitor"),
      AMOUNT((short)2, "amount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPETITOR
            return COMPETITOR;
          case 2: // AMOUNT
            return AMOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPETITOR, new org.apache.thrift.meta_data.FieldMetaData("competitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.devillsroom.poker.client.Competitor.class)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(winner_args.class, metaDataMap);
    }

    public winner_args() {
    }

    public winner_args(
      com.devillsroom.poker.client.Competitor competitor,
      long amount)
    {
      this();
      this.competitor = competitor;
      this.amount = amount;
      setAmountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public winner_args(winner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCompetitor()) {
        this.competitor = new com.devillsroom.poker.client.Competitor(other.competitor);
      }
      this.amount = other.amount;
    }

    public winner_args deepCopy() {
      return new winner_args(this);
    }

    @Override
    public void clear() {
      this.competitor = null;
      setAmountIsSet(false);
      this.amount = 0;
    }

    public com.devillsroom.poker.client.Competitor getCompetitor() {
      return this.competitor;
    }

    public winner_args setCompetitor(com.devillsroom.poker.client.Competitor competitor) {
      this.competitor = competitor;
      return this;
    }

    public void unsetCompetitor() {
      this.competitor = null;
    }

    /** Returns true if field competitor is set (has been assigned a value) and false otherwise */
    public boolean isSetCompetitor() {
      return this.competitor != null;
    }

    public void setCompetitorIsSet(boolean value) {
      if (!value) {
        this.competitor = null;
      }
    }

    public long getAmount() {
      return this.amount;
    }

    public winner_args setAmount(long amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPETITOR:
        if (value == null) {
          unsetCompetitor();
        } else {
          setCompetitor((com.devillsroom.poker.client.Competitor)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPETITOR:
        return getCompetitor();

      case AMOUNT:
        return Long.valueOf(getAmount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPETITOR:
        return isSetCompetitor();
      case AMOUNT:
        return isSetAmount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof winner_args)
        return this.equals((winner_args)that);
      return false;
    }

    public boolean equals(winner_args that) {
      if (that == null)
        return false;

      boolean this_present_competitor = true && this.isSetCompetitor();
      boolean that_present_competitor = true && that.isSetCompetitor();
      if (this_present_competitor || that_present_competitor) {
        if (!(this_present_competitor && that_present_competitor))
          return false;
        if (!this.competitor.equals(that.competitor))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(winner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompetitor()).compareTo(other.isSetCompetitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompetitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitor, other.competitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("winner_args(");
      boolean first = true;

      sb.append("competitor:");
      if (this.competitor == null) {
        sb.append("null");
      } else {
        sb.append(this.competitor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (competitor != null) {
        competitor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class winner_argsStandardSchemeFactory implements SchemeFactory {
      public winner_argsStandardScheme getScheme() {
        return new winner_argsStandardScheme();
      }
    }

    private static class winner_argsStandardScheme extends StandardScheme<winner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, winner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPETITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.competitor = new com.devillsroom.poker.client.Competitor();
                struct.competitor.read(iprot);
                struct.setCompetitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.amount = iprot.readI64();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, winner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.competitor != null) {
          oprot.writeFieldBegin(COMPETITOR_FIELD_DESC);
          struct.competitor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.amount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class winner_argsTupleSchemeFactory implements SchemeFactory {
      public winner_argsTupleScheme getScheme() {
        return new winner_argsTupleScheme();
      }
    }

    private static class winner_argsTupleScheme extends TupleScheme<winner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, winner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompetitor()) {
          optionals.set(0);
        }
        if (struct.isSetAmount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompetitor()) {
          struct.competitor.write(oprot);
        }
        if (struct.isSetAmount()) {
          oprot.writeI64(struct.amount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, winner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.competitor = new com.devillsroom.poker.client.Competitor();
          struct.competitor.read(iprot);
          struct.setCompetitorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.amount = iprot.readI64();
          struct.setAmountIsSet(true);
        }
      }
    }

  }

  public static class winner_result implements org.apache.thrift.TBase<winner_result, winner_result._Fields>, java.io.Serializable, Cloneable, Comparable<winner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("winner_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new winner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new winner_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(winner_result.class, metaDataMap);
    }

    public winner_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public winner_result(winner_result other) {
    }

    public winner_result deepCopy() {
      return new winner_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof winner_result)
        return this.equals((winner_result)that);
      return false;
    }

    public boolean equals(winner_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(winner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("winner_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class winner_resultStandardSchemeFactory implements SchemeFactory {
      public winner_resultStandardScheme getScheme() {
        return new winner_resultStandardScheme();
      }
    }

    private static class winner_resultStandardScheme extends StandardScheme<winner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, winner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, winner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class winner_resultTupleSchemeFactory implements SchemeFactory {
      public winner_resultTupleScheme getScheme() {
        return new winner_resultTupleScheme();
      }
    }

    private static class winner_resultTupleScheme extends TupleScheme<winner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, winner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, winner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class shutdown_args implements org.apache.thrift.TBase<shutdown_args, shutdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shutdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shutdown_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_args.class, metaDataMap);
    }

    public shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_args(shutdown_args other) {
    }

    public shutdown_args deepCopy() {
      return new shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args)that);
      return false;
    }

    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_argsStandardSchemeFactory implements SchemeFactory {
      public shutdown_argsStandardScheme getScheme() {
        return new shutdown_argsStandardScheme();
      }
    }

    private static class shutdown_argsStandardScheme extends StandardScheme<shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_argsTupleSchemeFactory implements SchemeFactory {
      public shutdown_argsTupleScheme getScheme() {
        return new shutdown_argsTupleScheme();
      }
    }

    private static class shutdown_argsTupleScheme extends TupleScheme<shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
