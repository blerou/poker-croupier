// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PlayerStrategy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::API;

class PlayerStrategyHandler : virtual public PlayerStrategyIf {
 public:
  PlayerStrategyHandler() {
    // Your initialization goes here
  }

  void name(std::string& _return) {
    // Your implementation goes here
    printf("name\n");
  }

  int64_t bet_request(const int64_t pot, const  ::API::BetLimits& limits) {
    // Your implementation goes here
    printf("bet_request\n");
  }

  void competitor_status(const  ::API::Competitor& competitor) {
    // Your implementation goes here
    printf("competitor_status\n");
  }

  void bet(const  ::API::Competitor& competitor, const  ::API::Bet& bet) {
    // Your implementation goes here
    printf("bet\n");
  }

  void hole_card(const  ::API::Card& card) {
    // Your implementation goes here
    printf("hole_card\n");
  }

  void community_card(const  ::API::Card& card) {
    // Your implementation goes here
    printf("community_card\n");
  }

  void showdown(const  ::API::Competitor& competitor, const std::vector< ::API::Card> & cards, const  ::API::HandDescriptor& hand) {
    // Your implementation goes here
    printf("showdown\n");
  }

  void winner(const  ::API::Competitor& competitor, const int64_t amount) {
    // Your implementation goes here
    printf("winner\n");
  }

  void shutdown() {
    // Your implementation goes here
    printf("shutdown\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<PlayerStrategyHandler> handler(new PlayerStrategyHandler());
  shared_ptr<TProcessor> processor(new PlayerStrategyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

