/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Ranking_H
#define Ranking_H

#include <thrift/TDispatchProcessor.h>
#include "ranking_types.h"

namespace API {

class RankingIf {
 public:
  virtual ~RankingIf() {}
  virtual void rank_hand( ::API::HandDescriptor& _return, const std::vector< ::API::Card> & cards) = 0;
};

class RankingIfFactory {
 public:
  typedef RankingIf Handler;

  virtual ~RankingIfFactory() {}

  virtual RankingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RankingIf* /* handler */) = 0;
};

class RankingIfSingletonFactory : virtual public RankingIfFactory {
 public:
  RankingIfSingletonFactory(const boost::shared_ptr<RankingIf>& iface) : iface_(iface) {}
  virtual ~RankingIfSingletonFactory() {}

  virtual RankingIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RankingIf* /* handler */) {}

 protected:
  boost::shared_ptr<RankingIf> iface_;
};

class RankingNull : virtual public RankingIf {
 public:
  virtual ~RankingNull() {}
  void rank_hand( ::API::HandDescriptor& /* _return */, const std::vector< ::API::Card> & /* cards */) {
    return;
  }
};

typedef struct _Ranking_rank_hand_args__isset {
  _Ranking_rank_hand_args__isset() : cards(false) {}
  bool cards;
} _Ranking_rank_hand_args__isset;

class Ranking_rank_hand_args {
 public:

  Ranking_rank_hand_args() {
  }

  virtual ~Ranking_rank_hand_args() throw() {}

  std::vector< ::API::Card>  cards;

  _Ranking_rank_hand_args__isset __isset;

  void __set_cards(const std::vector< ::API::Card> & val) {
    cards = val;
  }

  bool operator == (const Ranking_rank_hand_args & rhs) const
  {
    if (!(cards == rhs.cards))
      return false;
    return true;
  }
  bool operator != (const Ranking_rank_hand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ranking_rank_hand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Ranking_rank_hand_pargs {
 public:


  virtual ~Ranking_rank_hand_pargs() throw() {}

  const std::vector< ::API::Card> * cards;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Ranking_rank_hand_result__isset {
  _Ranking_rank_hand_result__isset() : success(false) {}
  bool success;
} _Ranking_rank_hand_result__isset;

class Ranking_rank_hand_result {
 public:

  Ranking_rank_hand_result() {
  }

  virtual ~Ranking_rank_hand_result() throw() {}

   ::API::HandDescriptor success;

  _Ranking_rank_hand_result__isset __isset;

  void __set_success(const  ::API::HandDescriptor& val) {
    success = val;
  }

  bool operator == (const Ranking_rank_hand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Ranking_rank_hand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ranking_rank_hand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Ranking_rank_hand_presult__isset {
  _Ranking_rank_hand_presult__isset() : success(false) {}
  bool success;
} _Ranking_rank_hand_presult__isset;

class Ranking_rank_hand_presult {
 public:


  virtual ~Ranking_rank_hand_presult() throw() {}

   ::API::HandDescriptor* success;

  _Ranking_rank_hand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RankingClient : virtual public RankingIf {
 public:
  RankingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RankingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void rank_hand( ::API::HandDescriptor& _return, const std::vector< ::API::Card> & cards);
  void send_rank_hand(const std::vector< ::API::Card> & cards);
  void recv_rank_hand( ::API::HandDescriptor& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RankingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RankingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RankingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_rank_hand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RankingProcessor(boost::shared_ptr<RankingIf> iface) :
    iface_(iface) {
    processMap_["rank_hand"] = &RankingProcessor::process_rank_hand;
  }

  virtual ~RankingProcessor() {}
};

class RankingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RankingProcessorFactory(const ::boost::shared_ptr< RankingIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RankingIfFactory > handlerFactory_;
};

class RankingMultiface : virtual public RankingIf {
 public:
  RankingMultiface(std::vector<boost::shared_ptr<RankingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RankingMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RankingIf> > ifaces_;
  RankingMultiface() {}
  void add(boost::shared_ptr<RankingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void rank_hand( ::API::HandDescriptor& _return, const std::vector< ::API::Card> & cards) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rank_hand(_return, cards);
    }
    ifaces_[i]->rank_hand(_return, cards);
    return;
  }

};

} // namespace

#endif
