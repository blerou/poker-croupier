/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "types_types.h"

#include <algorithm>

namespace API {

int _kSuitValues[] = {
  Suit::Hearts,
  Suit::Diamonds,
  Suit::Spades,
  Suit::Clubs
};
const char* _kSuitNames[] = {
  "Hearts",
  "Diamonds",
  "Spades",
  "Clubs"
};
const std::map<int, const char*> _Suit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSuitValues, _kSuitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBetTypeValues[] = {
  BetType::Fold,
  BetType::Check,
  BetType::Call,
  BetType::Blind,
  BetType::Raise,
  BetType::Allin
};
const char* _kBetTypeNames[] = {
  "Fold",
  "Check",
  "Call",
  "Blind",
  "Raise",
  "Allin"
};
const std::map<int, const char*> _BetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kBetTypeValues, _kBetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Competitor::ascii_fingerprint = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
const uint8_t Competitor::binary_fingerprint[16] = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

uint32_t Competitor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Competitor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Competitor");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stack", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->stack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Competitor &a, Competitor &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.stack, b.stack);
  swap(a.__isset, b.__isset);
}

const char* Card::ascii_fingerprint = "5753B366F7C02A6EB1D49313DD1BB5EA";
const uint8_t Card::binary_fingerprint[16] = {0x57,0x53,0xB3,0x66,0xF7,0xC0,0x2A,0x6E,0xB1,0xD4,0x93,0x13,0xDD,0x1B,0xB5,0xEA};

uint32_t Card::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->suit = (Suit::type)ecast0;
          this->__isset.suit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Card::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Card");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->suit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Card &a, Card &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.suit, b.suit);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* Bet::ascii_fingerprint = "9ACEC2FD9260700CE0F0CB6786329418";
const uint8_t Bet::binary_fingerprint[16] = {0x9A,0xCE,0xC2,0xFD,0x92,0x60,0x70,0x0C,0xE0,0xF0,0xCB,0x67,0x86,0x32,0x94,0x18};

uint32_t Bet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->amount);
          this->__isset.amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type = (BetType::type)ecast1;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->new_pot_size);
          this->__isset.new_pot_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bet");

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_pot_size", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->new_pot_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bet &a, Bet &b) {
  using ::std::swap;
  swap(a.amount, b.amount);
  swap(a.type, b.type);
  swap(a.new_pot_size, b.new_pot_size);
  swap(a.__isset, b.__isset);
}

const char* BetLimits::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t BetLimits::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t BetLimits::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->to_call);
          this->__isset.to_call = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->minimum_raise);
          this->__isset.minimum_raise = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BetLimits::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BetLimits");

  xfer += oprot->writeFieldBegin("to_call", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->to_call);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minimum_raise", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->minimum_raise);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BetLimits &a, BetLimits &b) {
  using ::std::swap;
  swap(a.to_call, b.to_call);
  swap(a.minimum_raise, b.minimum_raise);
  swap(a.__isset, b.__isset);
}

const char* HandDescriptor::ascii_fingerprint = "EE9507CF5E179F385D7466E797D385F7";
const uint8_t HandDescriptor::binary_fingerprint[16] = {0xEE,0x95,0x07,0xCF,0x5E,0x17,0x9F,0x38,0x5D,0x74,0x66,0xE7,0x97,0xD3,0x85,0xF7};

uint32_t HandDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ranks.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->ranks.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readI16(this->ranks[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ranks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HandDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HandDescriptor");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ranks", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->ranks.size()));
    std::vector<int16_t> ::const_iterator _iter7;
    for (_iter7 = this->ranks.begin(); _iter7 != this->ranks.end(); ++_iter7)
    {
      xfer += oprot->writeI16((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HandDescriptor &a, HandDescriptor &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.ranks, b.ranks);
  swap(a.__isset, b.__isset);
}

} // namespace
