/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef types_TYPES_H
#define types_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace API {

struct Suit {
  enum type {
    Hearts = 0,
    Diamonds = 1,
    Spades = 2,
    Clubs = 3
  };
};

extern const std::map<int, const char*> _Suit_VALUES_TO_NAMES;

struct BetType {
  enum type {
    Fold = 0,
    Check = 1,
    Call = 2,
    Blind = 3,
    Raise = 4,
    Allin = 5
  };
};

extern const std::map<int, const char*> _BetType_VALUES_TO_NAMES;

typedef struct _Competitor__isset {
  _Competitor__isset() : name(false), stack(false) {}
  bool name;
  bool stack;
} _Competitor__isset;

class Competitor {
 public:

  static const char* ascii_fingerprint; // = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

  Competitor() : name(), stack(0) {
  }

  virtual ~Competitor() throw() {}

  std::string name;
  int64_t stack;

  _Competitor__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_stack(const int64_t val) {
    stack = val;
  }

  bool operator == (const Competitor & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(stack == rhs.stack))
      return false;
    return true;
  }
  bool operator != (const Competitor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Competitor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Competitor &a, Competitor &b);

typedef struct _Card__isset {
  _Card__isset() : value(false), suit(false), name(false) {}
  bool value;
  bool suit;
  bool name;
} _Card__isset;

class Card {
 public:

  static const char* ascii_fingerprint; // = "5753B366F7C02A6EB1D49313DD1BB5EA";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x53,0xB3,0x66,0xF7,0xC0,0x2A,0x6E,0xB1,0xD4,0x93,0x13,0xDD,0x1B,0xB5,0xEA};

  Card() : value(0), suit((Suit::type)0), name() {
  }

  virtual ~Card() throw() {}

  int16_t value;
  Suit::type suit;
  std::string name;

  _Card__isset __isset;

  void __set_value(const int16_t val) {
    value = val;
  }

  void __set_suit(const Suit::type val) {
    suit = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Card & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(suit == rhs.suit))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Card &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Card & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Card &a, Card &b);

typedef struct _Bet__isset {
  _Bet__isset() : amount(false), type(false), new_pot_size(false) {}
  bool amount;
  bool type;
  bool new_pot_size;
} _Bet__isset;

class Bet {
 public:

  static const char* ascii_fingerprint; // = "9ACEC2FD9260700CE0F0CB6786329418";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xCE,0xC2,0xFD,0x92,0x60,0x70,0x0C,0xE0,0xF0,0xCB,0x67,0x86,0x32,0x94,0x18};

  Bet() : amount(0), type((BetType::type)0), new_pot_size(0) {
  }

  virtual ~Bet() throw() {}

  int64_t amount;
  BetType::type type;
  int64_t new_pot_size;

  _Bet__isset __isset;

  void __set_amount(const int64_t val) {
    amount = val;
  }

  void __set_type(const BetType::type val) {
    type = val;
  }

  void __set_new_pot_size(const int64_t val) {
    new_pot_size = val;
  }

  bool operator == (const Bet & rhs) const
  {
    if (!(amount == rhs.amount))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(new_pot_size == rhs.new_pot_size))
      return false;
    return true;
  }
  bool operator != (const Bet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Bet &a, Bet &b);

typedef struct _BetLimits__isset {
  _BetLimits__isset() : to_call(false), minimum_raise(false) {}
  bool to_call;
  bool minimum_raise;
} _BetLimits__isset;

class BetLimits {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  BetLimits() : to_call(0), minimum_raise(0) {
  }

  virtual ~BetLimits() throw() {}

  int64_t to_call;
  int64_t minimum_raise;

  _BetLimits__isset __isset;

  void __set_to_call(const int64_t val) {
    to_call = val;
  }

  void __set_minimum_raise(const int64_t val) {
    minimum_raise = val;
  }

  bool operator == (const BetLimits & rhs) const
  {
    if (!(to_call == rhs.to_call))
      return false;
    if (!(minimum_raise == rhs.minimum_raise))
      return false;
    return true;
  }
  bool operator != (const BetLimits &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BetLimits & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BetLimits &a, BetLimits &b);

typedef struct _HandDescriptor__isset {
  _HandDescriptor__isset() : name(false), ranks(false) {}
  bool name;
  bool ranks;
} _HandDescriptor__isset;

class HandDescriptor {
 public:

  static const char* ascii_fingerprint; // = "EE9507CF5E179F385D7466E797D385F7";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x95,0x07,0xCF,0x5E,0x17,0x9F,0x38,0x5D,0x74,0x66,0xE7,0x97,0xD3,0x85,0xF7};

  HandDescriptor() : name() {
  }

  virtual ~HandDescriptor() throw() {}

  std::string name;
  std::vector<int16_t>  ranks;

  _HandDescriptor__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_ranks(const std::vector<int16_t> & val) {
    ranks = val;
  }

  bool operator == (const HandDescriptor & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(ranks == rhs.ranks))
      return false;
    return true;
  }
  bool operator != (const HandDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HandDescriptor &a, HandDescriptor &b);

} // namespace

#endif
